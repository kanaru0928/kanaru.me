name: Deploy and Release

on:
  workflow_dispatch:

permissions:
  contents: write
  id-token: write
  pull-requests: write
  issues: write

jobs:
  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: deployment
    strategy:
      matrix:
        environment:
          - prod

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install Dependencies
        run: pnpm install

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configure AWS Credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.ROLE_TO_ASSUME }}
          output-credentials: true

      - name: ECR Login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push
        uses: docker/build-push-action@v6
        env:
          AWS_ACCESS_KEY_ID: ${{ steps.aws-credentials.outputs.aws-access-key-id }}
          AWS_SECRET_ACCESS_KEY: ${{ steps.aws-credentials.outputs.aws-secret-access-key }}
          AWS_REGION: ap-northeast-1
        with:
          context: remix-app
          push: true
          tags: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/ecr-kanaru-me-${{ matrix.environment }}:latest
          provenance: false
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pnpm dlx semantic-release

      - name: Latest Tag
        id: latest_tag
        run: |
          git fetch --tags
          echo "TAG=$(git tag -l --sort authordate | tail -n 1)" >> "$GITHUB_OUTPUT"

      - name: Cache Terraform
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ~/.terragrunt-cache
          key: terraform-${{ runner.os }}-${{ hashFiles('infrastructure/**/*.hcl', 'infrastructure/**/*.tf') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Check Terragrunt HCL
        uses: gruntwork-io/terragrunt-action@v2
        env:
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        with:
          tg_dir: infrastructure/environments/${{ matrix.environment }}
          tg_command: "hclfmt --terragrunt-check --terragrunt-diff"
          tf_version: ${{ vars.TF_VERSION }}
          tg_version: ${{ vars.TG_VERSION }}

      - name: Terraform Apply
        uses: gruntwork-io/terragrunt-action@v2
        env:
          TF_VAR_version_name: ${{ steps.latest_tag.outputs.TAG }}
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        with:
          tg_dir: infrastructure/environments/${{ matrix.environment }}
          tg_command: apply
          tf_version: ${{ vars.TF_VERSION }}
          tg_version: ${{ vars.TG_VERSION }}

      - name: Update Lambda Code
        run: |
          aws lambda update-function-code --function-name lambda-kanaru-me-app-${{ matrix.environment }} --image-uri ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com/ecr-kanaru-me-${{ matrix.environment }}:latest
      
      - name: S3 Upload
        run: |
          aws s3 sync remix-app/build/client s3://760485329571-kanaru-me-static-site-${{ matrix.environment }} --delete
